# Fusion analysis uses RNA-Seq R1 and R2 data, hg19

# Manifest columns
# * cancer
# * case_ID
# * input_experimental_strategy
# * R1_submitter_id
# * R1_UUID
# * R2_submitter_id
# * R2_UUID
# * reference_version
# * file_type
# * file_name
# * file_size
# * md5sum

###  # from 4_
OUTD="manifest"; mkdir -p $OUTD

OUT="$OUTD/Fusion.CPTAC3.b1.manifest.dat"

# Where Qingsong deposited result data, filename e.g., Fusions_in_CCRC__C3L-00010.txt
DATD="/gscmnt/gc2521/dinglab/qgao/Submission/Fusion"

# Based on two complementary datasets:
    # SR_merged.  This is used for downloading data
    # columns: case, disease, experimental_strategy, sample_type, samples, filename, filesize, data_format, UUID, md5sum
SR="/gscuser/mwyczalk/projects/CPTAC3/import.preliminary/SR/SR_merged.dat"
    # BamMap.  Basis for analysis
    # columns:  SampleName, Case, Disease, ExpStrategy, SampType, DataPath, DataFormat, Reference, UUID
BM="/gscuser/mwyczalk/projects/CPTAC3/import.CPTAC3b1/BamMap/CPTAC3.b1.RNA-Seq.BamMap.dat"


# Strategy:
#   Obtain list of cases in BM and process one-by-one
#   Assume that analysis processes R1 and R2
#   Pull out details from BM and SR

function process_case {
CASE=$1

# >&2 echo Case: $CASE

CANCER=$(cut -f 1,2 $SR | grep $CASE | cut -f 2 | sort -u)
SOURCE_ES="RNA-Seq"
REF="hg19"  # arguably this should be GRCh37.75

# Taking advantage of logic used to build sample name, which separates R1 and R2
R1SN="${CASE}.RNA-Seq.R1.T"
R1UUID=$(grep $R1SN $BM | cut -f 9)

if [ -z $R1UUID ]; then
>&2 echo Error: $R1SN not found in $BM
exit 1
fi

R1FN=$(grep $R1SN $BM | cut -f 6 | xargs basename )
# >&2 echo - R1FN: $R1FN

R2SN="${CASE}.RNA-Seq.R2.T"
R2UUID=$(grep $R2SN $BM | cut -f 9)
R2FN=$(grep $R2SN $BM | cut -f 6 | xargs basename )
# >&2 echo - R2FN: $R2FN

# Constructing FN as generated by analysis
FILETYPE="fusion"
FN="Fusions_in_${CANCER}__${CASE}.txt"
LFN="$DATD/$FN"
if [ ! -e $LFN ] ; then
    echo $LFN does not exist
    exit
fi
SIZE=$(stat --printf="%s" $LFN)
# >&2 echo - SIZE: $SIZE
MD5=$(md5sum $LFN | cut -f 1 -d ' ')
# >&2 echo - MD5: $MD5

printf "$CANCER\t$CASE\t$SOURCE_ES\t$R1FN\t$R1UUID\t$R2FN\t$R2UUID\t$REF\t$FILETYPE\t$FN\t$SIZE\t$MD5\n" >> $OUT
}


printf "cancer\tcase_ID\tinput_experimental_strategy\tR1_submitter_id\tR1_UUID\tR2_submitter_id\tR2_UUID\treference_version\tfile_type\tfile_name\tfile_size\tmd5sum\n" > $OUT

while read CASE; do

[[ $CASE = \#* ]] && continue  # Skip commented out entries
>&2 echo Processing $CASE

process_case $CASE

done < <(grep -v "^#" $BM | cut -f 2 | sort -u)  # pull out all case IDs out of BamMap and loop through them

echo Written to $OUT
