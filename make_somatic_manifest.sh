
# Manifest columns
# * cancer
# * case_ID
# * input_experimental_strategy
# * input_submitter_id
# * input_UUID
# * reference_version
# * file_type
# * file_name
# * file_size
# * md5sum

source submit_config.sh

ANALYSIS=$1
DATD=$2
SOURCE_ES=$3 # "WGS" # Experimental Strategy
REF=$4 # "hg19"      # Reference


# Write to stdout manifest details for given case, provided that case cancer matches requested disease
function process_case {
CASE=$1
COI=$2  # the cancer of interest we wish to retain

CANCER=$(cut -f 1,2 $SR | grep $CASE | cut -f 2 | sort -u)

# Skip without writing if cancer types differ
if [ ! $COI == $CANCER ]; then
return
fi

# Taking advantage of logic used to build sample name, which separates tumor and normal. E.g.,
# C3L-00010.WXS.T
# C3L-00010.WXS.N
TSN="${CASE}.${SOURCE_ES}.T"
TUUID=$(grep $TSN $BM | cut -f 9)
TFN=$(grep $TSN $BM | cut -f 6 | xargs basename )
NSN="${CASE}.${SOURCE_ES}.N"
NUUID=$(grep $NSN $BM | cut -f 9)
NFN=$(grep $NSN $BM | cut -f 6 | xargs basename )

SSID=$(echo $IFN | cut -f 1 -d .)
 
# Constructing FN as generated by analysis
FILETYPE="vcf.gz"

#   `Somatic.WXS/C3L-00010.maf
FN="$ANALYSIS.${CASE}.vcf.gz"
DESTD=$(getd $CANCER $ANALYSIS)
DESTFN="$DESTD/$FN"

if [ ! -e $DESTFN ] ; then
    >&2 echo $DESTFN does not exist
    exit
fi
SIZE=$(stat --printf="%s" $DESTFN)
MD5=$(md5sum $DESTFN | cut -f 1 -d ' ')

printf "$CANCER\t$CASE\t$SOURCE_ES\t$TFN\t$TUUID\t$NFN\t$NUUID\t$REF\t$FILETYPE\t$FN\t$SIZE\t$MD5\n" 
}


function write_disease_manifest {
COI=$1  # The cancer of interest we wish to retain

MANIFEST_FN="manifest.$ANALYSIS.$PROJECT.$CANCER.dat"
printf "cancer\tcase_ID\tinput_experimental_strategy\ttumor_submitter_id\ttumor_UUID\tnormal_submitter_id\tnormal_UUID\treference_version\tfile_type\tfile_name\tfile_size\tmd5sum\n" > $MANIFSET_FN

while read CASE; do

[[ $CASE = \#* ]] && continue  # Skip commented out entries
>&2 echo Processing $CASE

process_case $CASE $COI >> $MANIFEST_FN

done < <(grep -v "^#" $BM | cut -f 2 | sort -u)  # pull out all case IDs out of BamMap and loop through them

>&2 echo Written to $MANIFSET_FN
}


for COI in $DISEASES; do
    write_disease_manifest $COI
done
